/*
 * =============================================================================
 *   HSA Runtime Conformance Release License
 * =============================================================================
 * The University of Illinois/NCSA
 * Open Source License (NCSA)
 *
 * Copyright (c) 2014, Advanced Micro Devices, Inc.
 * All rights reserved.
 *
 * Developed by:
 *
 *                 AMD Research and AMD HSA Software Development
 *
 *                 Advanced Micro Devices, Inc.
 *
 *                 www.amd.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal with the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimers.
 *  - Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimers in
 *    the documentation and/or other materials provided with the distribution.
 *  - Neither the names of <Name of Development Group, Name of Institution>,
 *    nor the names of its contributors may be used to endorse or promote
 *    products derived from this Software without specific prior written
 *    permission.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS WITH THE SOFTWARE.
 *
 */

module &signal_operations:1:0:$full:$large:$default;

decl prog function &abort()();

prog kernel &__signal_st_rlx_kernel(
	kernarg_u32 %count,
	kernarg_u64 %signal_handle,
	kernarg_u64 %signal_value) {
@__signal_st_rlx_kernel_entry:
	// BB#0:                                // %entry
        // If the gid is greater than count, just return.
	workitemabsid_u32	$s0, 0;
	ld_kernarg_align(4)_width(all)_s32	$s1, [%count];
	cmp_gt_b1_s32	$c0, $s0, $s1;
	cbr_b1	$c0, @BB0_2;

	// BB#1:                                // %if.end
        // Use the gid to select the appropriate signal handle and value. 
	ld_kernarg_align(8)_width(all)_u64	$d0, [%signal_value];
	ld_kernarg_align(8)_width(all)_u64	$d1, [%signal_handle];
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 3;

	// The $d1 register holds the address of the signal handle.
	add_u64	$d1, $d1, $d2;

	// The $d0 register holds the address of the signal value.
	add_u64	$d0, $d0, $d2;

        // The $d2 register is the signal handle.
	ld_global_sig64	$d2, [$d1];

        // The $s0 register is the desired signal value.
	ld_global_s64	$d3, [$d0];

        // Set the signal value.
        signalnoret_st_rlx_b64_sig64 $d2, $d3;

@BB0_2:
	// %return
	ret;
};

prog kernel &__signal_st_screl_kernel(
	kernarg_u32 %count,
	kernarg_u64 %signal_handle,
	kernarg_u64 %signal_value) {
@__signal_st_screl_kernel_entry:
	// BB#0:                                // %entry
        // If the gid is greater than count, just return.
	workitemabsid_u32	$s0, 0;
	ld_kernarg_align(4)_width(all)_s32	$s1, [%count];
	cmp_gt_b1_s32	$c0, $s0, $s1;
	cbr_b1	$c0, @BB0_2;

	// BB#1:                                // %if.end
        // Use the gid to select the appropriate signal handle and value. 
	ld_kernarg_align(8)_width(all)_u64	$d0, [%signal_value];
	ld_kernarg_align(8)_width(all)_u64	$d1, [%signal_handle];
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 3;

	// The $d1 register holds the address of the signal handle.
	add_u64	$d1, $d1, $d2;

	// The $d0 register holds the address of the signal value
	add_u64	$d0, $d0, $d2;

        // The $d2 register is the signal handle.
	ld_global_sig64	$d2, [$d1];

        // The $s0 register is the desired signal value.
	ld_global_s64	$d3, [$d0];

        // Set the signal value.
        signalnoret_st_screl_b64_sig64 $d2, $d3;

@BB0_2:
	// %return
	ret;
};

prog kernel &__signal_wait_eq_rlx_kernel(
	kernarg_u32 %count,
	kernarg_u64 %signal_handle,
	kernarg_u64 %compare_value) {
@__signal_wait_eq_rlx_kernel_entry:
	// BB#0:                                // %entry
        // If the gid is greater than count, just return.
	workitemabsid_u32	$s0, 0;
	ld_kernarg_align(4)_width(all)_s32	$s1, [%count];
	cmp_gt_b1_s32	$c0, $s0, $s1;
	cbr_b1	$c0, @BB0_2;

	// BB#1:                                // %if.end
        // Use the gid to select the appropriate signal handle and value. 
	ld_kernarg_align(8)_width(all)_u64	$d0, [%compare_value];
	ld_kernarg_align(8)_width(all)_u64	$d1, [%signal_handle];
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 3;

	// The $d1 register holds the address of the signal handle.
	add_u64	$d1, $d1, $d2;

	// The $d0 register holds the address of the compare value.
	add_u64	$d0, $d0, $d2;

        // The $d2 register is the signal handle.
	ld_global_sig64	$d2, [$d1];

        // The $d3 register contains the compare value.
	ld_global_s64 $d3, [$d0];

        // Wait on the signal value.
        signal_wait_eq_rlx_s64_sig64 $d3, $d2, $d3;

@BB0_2:
	// %return
	ret;
};

prog kernel &__signal_wait_eq_scacq_kernel(
	kernarg_u32 %count,
	kernarg_u64 %signal_handle,
	kernarg_u64 %compare_value) {
@__signal_wait_eq_scacq_kernel_entry:
	// BB#0:                                // %entry
        // If the gid is greater than count, just return.
	workitemabsid_u32	$s0, 0;
	ld_kernarg_align(4)_width(all)_s32	$s1, [%count];
	cmp_gt_b1_s32	$c0, $s0, $s1;
	cbr_b1	$c0, @BB0_2;

	// BB#1:                                // %if.end
        // Use the gid to select the appropriate signal handle and value. 
	ld_kernarg_align(8)_width(all)_u64	$d0, [%compare_value];
	ld_kernarg_align(8)_width(all)_u64	$d1, [%signal_handle];
	cvt_s64_s32	$d2, $s0;
	shl_u64	$d2, $d2, 3;

	// The $d1 register holds the address of the signal handle.
	add_u64	$d1, $d1, $d2;

	// The $d0 register holds the address of the compare value.
	add_u64	$d0, $d0, $d2;

        // The $d2 register is the signal handle.
	ld_global_sig64	$d2, [$d1];

        // The $d3 register contains the compare value.
	ld_global_s64	$d3, [$d0];

        // Wait on the signal value.
        signal_wait_eq_scacq_s64_sig64 $d3, $d2, $d3;

@BB0_2:
	// %return
	ret;
};
