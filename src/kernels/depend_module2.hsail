/*
 * =============================================================================
 *   HSA Runtime Conformance Release License
 * =============================================================================
 * The University of Illinois/NCSA
 * Open Source License (NCSA)
 *
 * Copyright (c) 2014, Advanced Micro Devices, Inc.
 * All rights reserved.
 *
 * Developed by:
 *
 *                 AMD Research and AMD HSA Software Development
 *
 *                 Advanced Micro Devices, Inc.
 *
 *                 www.amd.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal with the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimers.
 *  - Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimers in
 *    the documentation and/or other materials provided with the distribution.
 *  - Neither the names of <Name of Development Group, Name of Institution>,
 *    nor the names of its contributors may be used to endorse or promote
 *    products derived from this Software without specific prior written
 *    permission.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS WITH THE SOFTWARE.
 *
 */

module &depend_module2:1:0:$full:$large:$default;

/*
 *  Kernels: depend_module2 
 *
 *  Description: The module2 depends on module1 to process 
 *
 *  Psuedo code:
 *
 *  __kernel void element_add_kernel(
 *          __global int* in0,
 *          __global int* in1,
 *          __global int* out) { 
 *     call element_add(out)(in0,in1);
 *  }
 *
 */

decl prog function &abort()();

decl prog function &element_add_fn(arg_u32 %out)(arg_u32 %in0, arg_u32 %in1);

prog kernel &__element_add_kernel(
    kernarg_u64 %in0,
    kernarg_u64 %in1,
    kernarg_u64 %out
        ) {
@__element_add_kernel_entry:
    // BB#0:                                // %entry
    workitemabsid_u32    $s0, 0; //obtain the work_item absolute ID within the entire grid
    cvt_u64_u32    $d0, $s0;    //convert 32 bits to 64 bits, stored in $d0
    shl_u64    $d1, $d0, 2;    //shift $d0 left by 2 bit, store in $d1, for 32 bit integers 
    ld_kernarg_align(8)_width(all)_u64 $d0, [%out];//load the base address of out to $d0
    add_u64    $d0, $d0, $d1;  //calculate the address of the output element
    ld_kernarg_align(8)_width(all)_u64 $d2, [%in0];
    add_u64    $d2, $d2, $d1;
    ld_kernarg_align(8)_width(all)_u64 $d3, [%in1];
    add_u64    $d3, $d3, $d1;

    //start argument scope
    {
        arg_u32 %sum;
        arg_u32 %arg0;
        arg_u32 %arg1;
        ld_global_align(4)_u32 $s0, [$d0];
        ld_global_align(4)_u32 $s1, [$d2];
        ld_global_align(4)_u32 $s2, [$d3];
        //fill in the arguments
        st_arg_u32 $s0, [%sum];
        st_arg_u32 $s1, [%arg0];
        st_arg_u32 $s2, [%arg1];
        call &element_add_fn(%sum)(%arg0,%arg1);
        ld_arg_align(4)_u32 $s0, [%sum];
    }
    //end of argument scope
    st_global_align(4)_u32    $s0, [$d0]; //store the result to the out vector
    ret;
};
