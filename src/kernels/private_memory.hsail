/*
 * =============================================================================
 *   HSA Runtime Conformance Release License
 * =============================================================================
 * The University of Illinois/NCSA
 * Open Source License (NCSA)
 *
 * Copyright (c) 2014, Advanced Micro Devices, Inc.
 * All rights reserved.
 *
 * Developed by:
 *
 *                 AMD Research and AMD HSA Software Development
 *
 *                 Advanced Micro Devices, Inc.
 *
 *                 www.amd.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal with the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimers.
 *  - Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimers in
 *    the documentation and/or other materials provided with the distribution.
 *  - Neither the names of <Name of Development Group, Name of Institution>,
 *    nor the names of its contributors may be used to endorse or promote
 *    products derived from this Software without specific prior written
 *    permission.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS WITH THE SOFTWARE.
 *
 */

module &private_memory:1:0:$full:$large:$default;

/*
 *  Kernels: private_memory_kernel
 *
 *  Description: The purpose of the private memory kernel
 *  is to generate a BRIG file that requires private memory.
 *
 *  Psuedo code:
 *
 *  __kernel void private_memory(__global uint *in, __global uint *out, __private uint count) {
 *    __private uint gid;
 *    __private uint lid;
 *    __private uint pvt[256];
 * 
 *    gid = get_global_id(0);
 * 
 *    lid = get_local_id(0);
 * 
 *    if(lid > count) {
 *      return;
 *    }
 * 
 *    barrier(CLK_LOCAL_MEM_FENCE);
 * 
 *    out[gid] = in[gid];
 * 
 *    return;
 * }
 *
 *
 */

decl prog function &abort()();

prog kernel &__private_memory_kernel(
	kernarg_u64 %in,
	kernarg_u64 %out,
	kernarg_u32 %count) {
        private_u32 %pvt[128];

@__private_memory_kernel_entry:
	// BB#0:                                // %entry
	ld_kernarg_align(4)_width(all)_u32	$s0, [%count];
	workitemid_u32	$s1, 0;
	cmp_gt_b1_u32	$c0, $s1, $s0;
	cbr_b1	$c0, @BB0_2;
	// BB#1:                                // %if.end
	ld_kernarg_align(8)_width(all)_u64	$d1, [%out];
	ld_kernarg_align(8)_width(all)_u64	$d0, [%in];
	workitemabsid_u32	$s0, 0;
	cvt_u64_u32	$d2, $s0;
	shl_u64	$d2, $d2, 2;
	add_u64	$d1, $d1, $d2;
	add_u64	$d0, $d0, $d2;
	barrier;
	ld_global_u32	$s0, [$d0];
	st_global_u32	$s0, [$d1];

@BB0_2:
	// %return
	ret;
};
